// <auto-generated />
using System;
using DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241120201938_Product-created")]
    partial class Productcreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int")
                        .HasComment("اولویت نمایش");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasComment("آیدی موجودیت مادر");

                    b.Property<string>("PictureAlt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("آلت عکس برای سئو");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("آدرس عکس");

                    b.Property<string>("PictureTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("عنوان عکس برای سئو");

                    b.Property<int>("PictureType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("نوع عکس");

                    b.Property<long>("_CreatedByUser")
                        .HasColumnType("bigint")
                        .HasComment("کاربر سازنده");

                    b.Property<DateTimeOffset>("_CreationDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("تاریخ ساخت");

                    b.Property<byte[]>("_RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("بررسی همزمانی");

                    b.HasKey("Id");

                    b.ToTable("Pictures", "Main", t =>
                        {
                            t.HasComment("عکس ها");
                        });
                });

            modelBuilder.Entity("Domain.Models.Shop.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("توضیحات");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("عنوان");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint")
                        .HasComment("آیدی دسته بندی محصول");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("توضیحات کوتاه");

                    b.Property<string>("_Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("کد محصولی");

                    b.Property<long>("_CreatedByUser")
                        .HasColumnType("bigint")
                        .HasComment("کاربر سازنده");

                    b.Property<DateTimeOffset>("_CreationDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("تاریخ ساخت");

                    b.Property<DateTimeOffset?>("_DeleteDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("تاریخ حذف");

                    b.Property<long?>("_DeletedByUser")
                        .HasColumnType("bigint")
                        .HasComment("کاربر حذف کننده");

                    b.Property<bool>("_IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("_RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("بررسی همزمانی");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products", "Shop", t =>
                        {
                            t.HasComment("محصول ها");
                        });
                });

            modelBuilder.Entity("Domain.Models.Shop.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("توضیحات");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("عنوان");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasComment("آیدی دسته بندی اصلی محصول");

                    b.Property<long>("_CreatedByUser")
                        .HasColumnType("bigint")
                        .HasComment("کاربر سازنده");

                    b.Property<DateTimeOffset>("_CreationDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("تاریخ ساخت");

                    b.Property<DateTimeOffset?>("_DeleteDate")
                        .HasColumnType("datetimeoffset")
                        .HasComment("تاریخ حذف");

                    b.Property<long?>("_DeletedByUser")
                        .HasColumnType("bigint")
                        .HasComment("کاربر حذف کننده");

                    b.Property<bool>("_IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("_RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("بررسی همزمانی");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", "Shop", t =>
                        {
                            t.HasComment("دسته بندی های محصول");
                        });
                });

            modelBuilder.Entity("Domain.Models.Shop.Product", b =>
                {
                    b.HasOne("Domain.Models.Shop.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Seo", "Seo", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Keywords")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasComment("کلمات کلیدی برای سئو");

                            b1.Property<string>("MetaDescription")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasComment("توضیحات متا برای سئو");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasComment("اسلاگ برای سئو");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products", "Shop");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("ProductCategory");

                    b.Navigation("Seo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Shop.ProductCategory", b =>
                {
                    b.OwnsOne("Domain.Models.Seo", "Seo", b1 =>
                        {
                            b1.Property<long>("ProductCategoryId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Keywords")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasComment("کلمات کلیدی برای سئو");

                            b1.Property<string>("MetaDescription")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasComment("توضیحات متا برای سئو");

                            b1.Property<string>("Slug")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasComment("اسلاگ برای سئو");

                            b1.HasKey("ProductCategoryId");

                            b1.ToTable("ProductCategories", "Shop");

                            b1.WithOwner()
                                .HasForeignKey("ProductCategoryId");
                        });

                    b.Navigation("Seo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
